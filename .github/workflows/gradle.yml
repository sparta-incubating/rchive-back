# 워크 플로우 이름
name: Java CI with Gradle

# 워크 플로우가 언제 실행 될지를 정한다.
on:
  pull_request:
    #branches: [ "dev" ]
    branches: [ "test/cicd-202" ]

env:
  DB_URL: ${{secrets.DB_URL}}
  DB_USER: ${{secrets.DB_USER}}
  DB_PASSWORD: ${{secrets.DB_PASSWORD}}
  REDIS_HOST: ${{secrets.REDIS_HOST}}
  REDIS_PORT: ${{secrets.REDIS_PORT}}
  JWT_KEY: ${{secrets.JWT_KEY}}
  BUCKET_NAME: ${{secrets.BUCKET_NAME}}
  REGION: ${{secrets.REGION}}
  S3_ACCESS_KEY: ${{secrets.S3_ACCESS_KEY}}
  S3_SECRET_ACCESS_KEY: ${{secrets.S3_SECRET_ACCESS_KEY}}

# 워크 플로우가 깃 레포에 대한 권한을 읽기 만 가능하게 설정한다.
permissions:
  contents: read

# 워크플로우에서 할 작업 정의한다.
jobs:
  # 작업 환경 = 우분투 최신 버전
  build:
    runs-on: ubuntu-latest

    # 깃허브에서 제공하는 checkout 엑션 사용
    steps:
      - uses: actions/checkout@v4

      # temurin = Adoptium에서 제공하는 JDK
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # gradle wrapper 파일에 실행 권한을 부여
      # gradle wrapper = 개발자가 특정 버전의 Gradle을 미리 설치하지 않고도 Gradle 빌드를 실행할 수 있게 해주는 편리한 도구
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Gradle 빌드 엑션을 이용해서 프로젝트 빌드
      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: '8.6'
          arguments: build test

      - name: Docker login
        run: echo "${{secrets.DOCKER_HUB_TOKEN}}" | docker login -u ${{secrets.DOCKER_USERNAME}} --password-stdin

      - name: Docker build
        run: docker build -f Dockerfile --tag ${{secrets.DOCKER_USERNAME}}/${{secrets.DOCKER_REPO}}:latest .

      - name: Docker push to docker repo
        run: docker push ${{secrets.DOCKER_USERNAME}}/${{secrets.DOCKER_REPO}}:latest

      # appleboy/ssh-action@master 액션을 사용하여 지정한 서버에 ssh로 접속하고, script를 실행합니다.
      # script의 내용은 도커의 기존 프로세스들을 제거하고, docker repo로부터 방금 위에서 push한 내용을 pull 받아 실행하는 것입니다.
      # 실행 시, docker-compose를 사용합니다.
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        id: deploy
        with:
          host: ${{secrets.HOST}}
          username: ${{secrets.USER}}
          key: ${{secrets.SSH_PEM_KEY}}
          envs: GITHUB_SHA
          script: |
            sudo echo "${{secrets.DOCKER_HUB_TOKEN}}" | docker login -u ${{secrets.DOCKER_USERNAME}} --password-stdin
            if [ "$(docker ps -qa)" ]; then
              docker rm -f $(docker ps -qa)
            fi
            docker pull ${{secrets.DOCKER_USERNAME}}/${{secrets.DOCKER_REPO}}:latest
            docker run -d --name rchive-api-${VERSION} -p 8080:8080 -e VERSION=${VERSION} -e SPRING_PROFILES_ACTIVE=prod ${{secrets.DOCKER_USERNAME}}/${{secrets.DOCKER_REPO}}:latest
            docker image prune -f
