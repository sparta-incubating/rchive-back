# 워크 플로우 이름
name: Java CI with Gradle

# 워크 플로우가 언제 실행 될지를 정한다.
on:
  pull_request:
    #branches: [ "dev" ]
    branches: [ "test/cicd/cd-65" ]

env:
  DB_URL: ${{secrets.DB_URL}}
  DB_USER: ${{secrets.DB_USER}}
  DB_PASSWORD: ${{secrets.DB_PASSWORD}}
  REDIS_HOST: ${{secrets.REDIS_HOST}}
  REDIS_PORT: ${{secrets.REDIS_PORT}}
  JWT_KEY: ${{secrets.JWT_KEY}}
  BUCKET_NAME: ${{secrets.BUCKET_NAME}}
  REGION: ${{secrets.REGION}}
  S3_ACCESS_KEY: ${{secrets.S3_ACCESS_KEY}}
  S3_SECRET_ACCESS_KEY: ${{secrets.S3_SECRET_ACCESS_KEY}}

# 워크 플로우가 깃 레포에 대한 권한을 읽기 만 가능하게 설정한다.
permissions:
  contents: read

# 워크플로우에서 할 작업 정의한다.
jobs:
  # 작업 환경 = 우분투 최신 버전
  build:
    runs-on: ubuntu-latest

    # 깃허브에서 제공하는 checkout 엑션 사용
    steps:
      - uses: actions/checkout@v4

      # temurin = Adoptium에서 제공하는 JDK
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # gradle wrapper 파일에 실행 권한을 부여
      # gradle wrapper = 개발자가 특정 버전의 Gradle을 미리 설치하지 않고도 Gradle 빌드를 실행할 수 있게 해주는 편리한 도구
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Gradle 빌드 엑션을 이용해서 프로젝트 빌드
      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: '8.6'
          arguments: build test

      - name: Docker login
        run: echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: Docker build
        run: docker build -f Dockerfile --tag ${{ secrets.DOCKER_REPO }}/directors-dev:latest .

      - name: Docker push to docker repo
        run: docker push ${{ secrets.DOCKER_REPO }}/directors-dev:latest

      # appleboy/ssh-action@master 액션을 사용하여 지정한 서버에 ssh로 접속하고, script를 실행합니다.
      # script의 내용은 도커의 기존 프로세스들을 제거하고, docker repo로부터 방금 위에서 push한 내용을 pull 받아 실행하는 것입니다.
      # 실행 시, docker-compose를 사용합니다.
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        id: deploy
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_PEM_KEY }}
          envs: GITHUB_SHA
          script: |
            sudo docker rm -f $(docker ps -qa)
            sudo docker pull ${{ secrets.DOCKER_REPO }}/directors-dev:latest
            docker-compose up -d
            docker image prune -f
          #
          #  # 배포 **
          #  deploy:
          #    needs: build
          #    runs-on: ubuntu-latest
          #
          #    # 위의 빌드작업한 JAR 파일 = 아티팩트를 다운로드
          #    steps:
          #      - name: Download build artifact
          #        uses: actions/download-artifact@v2
          #        with:
          #          name: rchive-back
          #          path: build/libs/
          #
          #      - name: Download Dockerfile
          #        uses: actions/download-artifact@v2
          #        with:
          #          name: rchive-dockerfile
          #          path: ./
          #
          #      - name: Download docker-compose
          #        uses: actions/download-artifact@v2
          #        with:
          #          name: rchive-docker-compose
          #          path: docker/
          #
          #      - name: Deploy to EC2 and Build/Run Docker Containers
          #        run: |
          #          echo "${{ secrets.SSH_PEM_KEY }}" > ssh_key.pem
          #          chmod 600 ssh_key.pem
          #          VERSION=$(grep VERSION back.env | cut -d '=' -f2)
          #          scp -i ssh_key.pem -o StrictHostKeyChecking=no build/libs/flash-0.0.1-SNAPSHOT.jar ${{ secrets.USER }}@${{ secrets.HOST }}:/home/${{ secrets.USER }}/flashh-back-$VERSION.jar
          #          ssh -i ssh_key.pem -o StrictHostKeyChecking=no ${{ secrets.USER }}@${{ secrets.HOST }} "pgrep java | xargs kill -9; nohup java -jar /home/${{ secrets.USER }}/flashh-back-$VERSION.jar > app.log 2>&1 &"
          #          scp -i ssh_key.pem -o StrictHostKeyChecking=no Dockerfile ${{ secrets.USER }}@${{ secrets.HOST }}:/home/${{ secrets.USER }}/Dockerfile
          #          scp -i ssh_key.pem -o StrictHostKeyChecking=no docker/docker-compose.yml ${{ secrets.USER }}@${{ secrets.HOST }}:/home/${{ secrets.USER }}/docker-compose.yml
          #          ssh -i ssh_key.pem -o StrictHostKeyChecking=no ${{ secrets.USER }}@${{ secrets.HOST }} << EOF
          #            cd /home/${{ secrets.USER }}
          #               export $(grep VERSION back.env)
          #               docker compose build
          #               docker compose up -d
          #          EOF


          
          


